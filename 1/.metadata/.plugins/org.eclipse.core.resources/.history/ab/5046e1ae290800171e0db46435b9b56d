<?php
//http://php.net/manual/en/language.types.array.php

//a simple array example
$array = array(
		
		"foo" => "bar",
		"bar" => "foo",
);

var_dump($array);
print '<br>';

//as of PHP 5.4

$array = [
		
	"foo" => "bar",
	"bar" => "foo",
];

var_dump($array);
print '<br>';

$array = [
		
		'bro' => 'tip',
		'golden' => 1,
		"funny" => true,
		false => 0,
		
];

echo "<pre>" , var_dump($array) , "</pre>";

$array[] = 9;
$array[12] = 'protein';
$array[] = false;

echo "<pre>" , var_dump($array) , "</pre>";



print '<br><br>';

//type casting and overwriting example
$ar = array(
		
		1 => "a",
		"1" => 'b',
		1.5 => "c",
		true => "d",
);

var_dump($ar);
print '<br><br>';

$ar[] = 'zorro';
var_dump($ar);
print '<br><br>';

//arrays without keys

$aar = array('keys','mobile','wallet');
print_r($aar);
print '<br>';
var_dump($aar);
print '<br><br>';


//keys not on all elements

$array = array(
	
		"a",
		"n",
		6 => "c",
		"d",
);

var_dump($array);
print '<br><br>';


//accessing array elements - [] {} interchangeably

$array = array(
		
		"foo" => "bar",
		24 => 42,
		"moolti" =>array(
				"dymensional" => array(
						"array"=>"pooh"
				)
		)
);

var_dump($array['foo']);
print '<br><br>';
var_dump($array['moolti']);
print '<br><br>';
var_dump($array{'moolti'});
print '<br><br>';
var_dump($array['moolti']['dymensional']);
print '<br><br>';
var_dump($array{'moolti'}['dymensional']{'array'});
print '<br><br>';

//array dereferencing

function getArray(){
	return array(1,2,3);
}

$secondElement = getArray()[1];
var_dump($secondElement);
print '<br><br>';

//creating/modifying with square brackets sytax

//key may be integer or string
//value may be any value of any type
$createdArray['key'] = 'value'; //this is legal but discouraged    
$createdArray[] = 3;
$createdArray[3] = 'water';
$createdArray[] = 222;

var_dump($createdArray);
print '<br><br>';

//ARRAY OPERATIONS

$araj = array(5 =>1, 12 =>2);
var_dump($araj);
print '<br><br>';

//adding a new element with default key
$araj[] = 56;
var_dump($araj);
print '<br><br>';

//adding a new element with key 'x'
$araj['x'] = 42;
var_dump($araj);
print '<br><br>';

//removing the element from the array
unset($araj[5]);
var_dump($araj);
print '<br><br>';

//deleting the whole array
unset($araj);
//var_dump($araj); -> results in Notice; undefined variable
print '<br><br>';


//INDEXING AND REINDEXING

echo "Indexing and reindexing";
print '<br><br>';

//create a simple array
$arra = array(1,2,3,4,5);
print_r($arra);
print '<br><br>';

//now delete every item but leave the array itself intact
foreach($arra as $i => $value){
	unset($arra[$i]);
}

print_r($arra);
print '<br><br>';

//append an item (note that the new key is 5, instead of 0)
$arra[] = 6;
print_r($arra);
print '<br><br>';

//reindex
$arra = array_values($arra);
$arra[] = 7;
print_r($arra);
print '<br><br>';


//a simple array, var_dump vs print_r

$arr = array(1,2,3,4,5);
print '<br><br>';
echo '<br><b>$arr = array(1,2,3,4,5);</b><br>';
echo '<br>var_dump($arr):<br>';
echo "<pre>" , var_dump($arr) , "</pre>";

echo '<b>print_r($arr):</b><br>';
echo "<pre>" , print_r($arr) , "</pre>";


//ARRAY FUNCTIONS

$a = array(1 => 'one', 2 => 'two',3=>'three');
unset($a[2]);
print_r($a);
print '<br><br>';

$b = array_values($a);
print_r($b);
print '<br><br>';
var_dump($b);
print '<br><br>';

//ARRAYS DO'S AND DON'TS
error_reporting(E_ALL);
ini_set('display_errors', true);
ini_set('html_errors',false);
//simple array
$array = array(1,2);
$count = count($array);
for ($i = 0; $i <$count; $i++){
	echo "<br>Checking $i: <br>";
	echo "Good: " . $array[$i] . "<br>";
	echo "Good: {$array[$i]}<br>";
}
print '<br><br>';
//the another example of quoted/unquoted keys

error_reporting(E_ALL);
$arr = array('fruit'=>'apple','veggie'=> 'carrot' );

//correct:
print $arr['fruit'];
print '<br>';
print $arr['veggie'];
print '<br>';

//incorrect:
print $arr[fruit];
print '<br>';

//this define constant to demonstrate what's going on,
//the value vegie is assigned to a constant named fruit
define('fruit','veggie');

//the difference:
print $arr['fruit'];
print '<br>';
print $arr[fruit];
print '<br>';

//the follwing is okay as it's inside a string;
//constants are not looked for within strings so no
//E_NOTICE occurs here
print "Hello $arr[fruit]";
print '<br>';

//with one exception: braces surrounding arrays within 
//strings allows constants to be interpreted
print "Hello {$arr[fruit]}";
print '<br>';
print "Hello {$arr['fruit']}";
print '<br>';

//concatenation is another option
print "Hello " . $arr['fruit'];
print '<br>';

//CONVERTING TO ARRAY

class A {
	private $A; 
}
class B {
	private $A;
	public $AA;
}

var_dump((array) new A())
	
var_dump((array) new B());





?>















































